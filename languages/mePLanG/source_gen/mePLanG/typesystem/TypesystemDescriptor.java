package mePLanG.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.BaseHelginsDescriptor;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.SubstituteType_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ComparisonRule_Runtime;

public class TypesystemDescriptor extends BaseHelginsDescriptor {
  public TypesystemDescriptor() {
    {
      InferenceRule_Runtime inferenceRule = new typeof_ElifClause_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_PL_BooleanConstant_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_PL_DoWhileStatement_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_PL_IfStatementCondition_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_PL_WhileStatementCondition_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      NonTypesystemRule_Runtime nonTypesystemRule = new check_ProgramHasMain_NonTypesystemRule();
      this.myNonTypesystemRules.add(nonTypesystemRule);
    }
    {
      NonTypesystemRule_Runtime nonTypesystemRule = new check_ReturnStatement_NonTypesystemRule();
      this.myNonTypesystemRules.add(nonTypesystemRule);
    }
    {
      NonTypesystemRule_Runtime nonTypesystemRule = new check_RoutineCallParameters_NonTypesystemRule();
      this.myNonTypesystemRules.add(nonTypesystemRule);
    }
    {
      NonTypesystemRule_Runtime nonTypesystemRule = new check_RoutineDefinitionHasReturn_NonTypesystemRule();
      this.myNonTypesystemRules.add(nonTypesystemRule);
    }
    {
      NonTypesystemRule_Runtime nonTypesystemRule = new check_RoutineNameDuplication_NonTypesystemRule();
      this.myNonTypesystemRules.add(nonTypesystemRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new IPL_AllowedTypes_subtypesOf_Type_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new PL_Boolean_subtypeOf_Boolean_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new PL_Boolean_subtypeOf_Type_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new PL_Character_subtypeOf_Integer_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new absoluteValue_subtypeOf_Numbers_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new boolean_subtypeOf_PL_Boolean_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubstituteType_Runtime substituteTypeRule = new substituteType_PL_Boolean_SubstituteTypeRule();
      this.mySubstituteTypeRules.add(substituteTypeRule);
    }
    {
      SubstituteType_Runtime substituteTypeRule = new substituteType_PL_Character_SubstituteTypeRule();
      this.mySubstituteTypeRules.add(substituteTypeRule);
    }
    {
      SubstituteType_Runtime substituteTypeRule = new substituteType_PL_Double_SubstituteTypeRule();
      this.mySubstituteTypeRules.add(substituteTypeRule);
    }
    {
      SubstituteType_Runtime substituteTypeRule = new substituteType_PL_Integer_SubstituteTypeRule();
      this.mySubstituteTypeRules.add(substituteTypeRule);
    }
    {
      SubstituteType_Runtime substituteTypeRule = new substituteType_PL_String_SubstituteTypeRule();
      this.mySubstituteTypeRules.add(substituteTypeRule);
    }
    {
      SubstituteType_Runtime substituteTypeRule = new substituteType_PL_Void_SubstituteTypeRule();
      this.mySubstituteTypeRules.add(substituteTypeRule);
    }
    {
      ComparisonRule_Runtime comparisonRule = new compare_PL_Integer_to_Char_ComparisonRule();
      this.myComparisonRules.add(comparisonRule);
    }
  }
}
