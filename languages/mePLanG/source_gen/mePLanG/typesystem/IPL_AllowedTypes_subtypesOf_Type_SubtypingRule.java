package mePLanG.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class IPL_AllowedTypes_subtypesOf_Type_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public IPL_AllowedTypes_subtypesOf_Type_SubtypingRule() {
  }
  public List<SNode> getSubOrSuperTypes(SNode ipL_AllowedTypes, TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<SNode> nlistNodes = new ArrayList<SNode>();
    ListSequence.fromList(nlistNodes).addElement(createPrimitiveType_5so5r8_a0a1a1());
    ListSequence.fromList(nlistNodes).addElement(createType_5so5r8_a0a2a1());
    return nlistNodes;
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.IPL_AllowedTypes$mF;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean isWeak() {
    return false;
  }
  private static SNode createPrimitiveType_5so5r8_a0a1a1() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.PrimitiveType$sR);
    return n0.getResult();
  }
  private static SNode createType_5so5r8_a0a2a1() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.Type$bu);
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IPL_AllowedTypes$mF = MetaAdapterFactory.getInterfaceConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x31a7bceb8d57ae68L, "mePLanG.structure.IPL_AllowedTypes");
    /*package*/ static final SConcept PrimitiveType$sR = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L, "jetbrains.mps.baseLanguage.structure.PrimitiveType");
    /*package*/ static final SConcept Type$bu = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL, "jetbrains.mps.baseLanguage.structure.Type");
  }
}
