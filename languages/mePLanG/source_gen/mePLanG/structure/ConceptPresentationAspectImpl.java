package mePLanG.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbsoluteValue;
  private ConceptPresentation props_BreakLineExpression;
  private ConceptPresentation props_EmptyLineStatement;
  private ConceptPresentation props_IPL_AllowedTypes;
  private ConceptPresentation props_IPL_ReturnTypes;
  private ConceptPresentation props_MathExpression;
  private ConceptPresentation props_PL_BooleanType;
  private ConceptPresentation props_PL_Boolean_Constant;
  private ConceptPresentation props_PL_Boolean_Constant_False;
  private ConceptPresentation props_PL_Boolean_Constant_True;
  private ConceptPresentation props_PL_CharacterType;
  private ConceptPresentation props_PL_DoWhileStatement;
  private ConceptPresentation props_PL_DoubleType;
  private ConceptPresentation props_PL_ElifClause;
  private ConceptPresentation props_PL_IfStatement;
  private ConceptPresentation props_PL_IntegerType;
  private ConceptPresentation props_PL_StatementList;
  private ConceptPresentation props_PL_StringType;
  private ConceptPresentation props_PL_VoidType;
  private ConceptPresentation props_PL_WhileStatement;
  private ConceptPresentation props_PrintStatement;
  private ConceptPresentation props_Program;
  private ConceptPresentation props_ReadStatement;
  private ConceptPresentation props_ReturnStatement;
  private ConceptPresentation props_RoutineCallExpression;
  private ConceptPresentation props_RoutineDefinition;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbsoluteValue:
        if (props_AbsoluteValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Abszolút érték");
          props_AbsoluteValue = cpb.create();
        }
        return props_AbsoluteValue;
      case LanguageConceptSwitch.BreakLineExpression:
        if (props_BreakLineExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Sor vége");
          cpb.rawPresentation("SV");
          props_BreakLineExpression = cpb.create();
        }
        return props_BreakLineExpression;
      case LanguageConceptSwitch.EmptyLineStatement:
        if (props_EmptyLineStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptyLineStatement");
          props_EmptyLineStatement = cpb.create();
        }
        return props_EmptyLineStatement;
      case LanguageConceptSwitch.IPL_AllowedTypes:
        if (props_IPL_AllowedTypes == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IPL_AllowedTypes = cpb.create();
        }
        return props_IPL_AllowedTypes;
      case LanguageConceptSwitch.IPL_ReturnTypes:
        if (props_IPL_ReturnTypes == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IPL_ReturnTypes = cpb.create();
        }
        return props_IPL_ReturnTypes;
      case LanguageConceptSwitch.MathExpression:
        if (props_MathExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MathExpression = cpb.create();
        }
        return props_MathExpression;
      case LanguageConceptSwitch.PL_BooleanType:
        if (props_PL_BooleanType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Logikai típus");
          cpb.rawPresentation("Logikai");
          props_PL_BooleanType = cpb.create();
        }
        return props_PL_BooleanType;
      case LanguageConceptSwitch.PL_Boolean_Constant:
        if (props_PL_Boolean_Constant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PL_Boolean_Constant = cpb.create();
        }
        return props_PL_Boolean_Constant;
      case LanguageConceptSwitch.PL_Boolean_Constant_False:
        if (props_PL_Boolean_Constant_False == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Hamis logikai érték");
          cpb.rawPresentation("HAMIS");
          props_PL_Boolean_Constant_False = cpb.create();
        }
        return props_PL_Boolean_Constant_False;
      case LanguageConceptSwitch.PL_Boolean_Constant_True:
        if (props_PL_Boolean_Constant_True == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Igaz logikai érték");
          cpb.rawPresentation("IGAZ");
          props_PL_Boolean_Constant_True = cpb.create();
        }
        return props_PL_Boolean_Constant_True;
      case LanguageConceptSwitch.PL_CharacterType:
        if (props_PL_CharacterType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Karakter típus");
          cpb.rawPresentation("Karakter");
          props_PL_CharacterType = cpb.create();
        }
        return props_PL_CharacterType;
      case LanguageConceptSwitch.PL_DoWhileStatement:
        if (props_PL_DoWhileStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Hátultesztelős ciklus");
          cpb.rawPresentation("CIKLUS Hátul");
          props_PL_DoWhileStatement = cpb.create();
        }
        return props_PL_DoWhileStatement;
      case LanguageConceptSwitch.PL_DoubleType:
        if (props_PL_DoubleType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Valós típus");
          cpb.rawPresentation("Valós");
          props_PL_DoubleType = cpb.create();
        }
        return props_PL_DoubleType;
      case LanguageConceptSwitch.PL_ElifClause:
        if (props_PL_ElifClause == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PL_ElifClause");
          props_PL_ElifClause = cpb.create();
        }
        return props_PL_ElifClause;
      case LanguageConceptSwitch.PL_IfStatement:
        if (props_PL_IfStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Elágazás");
          cpb.rawPresentation("HA");
          props_PL_IfStatement = cpb.create();
        }
        return props_PL_IfStatement;
      case LanguageConceptSwitch.PL_IntegerType:
        if (props_PL_IntegerType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Egész típus");
          cpb.rawPresentation("Egész");
          props_PL_IntegerType = cpb.create();
        }
        return props_PL_IntegerType;
      case LanguageConceptSwitch.PL_StatementList:
        if (props_PL_StatementList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PL_StatementList");
          props_PL_StatementList = cpb.create();
        }
        return props_PL_StatementList;
      case LanguageConceptSwitch.PL_StringType:
        if (props_PL_StringType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Szöveg típus");
          cpb.rawPresentation("Szöveg");
          props_PL_StringType = cpb.create();
        }
        return props_PL_StringType;
      case LanguageConceptSwitch.PL_VoidType:
        if (props_PL_VoidType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Üres típus");
          cpb.rawPresentation("Semmi");
          props_PL_VoidType = cpb.create();
        }
        return props_PL_VoidType;
      case LanguageConceptSwitch.PL_WhileStatement:
        if (props_PL_WhileStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Elöltesztelős ciklus");
          cpb.rawPresentation("CIKLUS Elöl");
          props_PL_WhileStatement = cpb.create();
        }
        return props_PL_WhileStatement;
      case LanguageConceptSwitch.PrintStatement:
        if (props_PrintStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Konzolra írás");
          cpb.rawPresentation("KI");
          props_PrintStatement = cpb.create();
        }
        return props_PrintStatement;
      case LanguageConceptSwitch.Program:
        if (props_Program == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Program = cpb.create();
        }
        return props_Program;
      case LanguageConceptSwitch.ReadStatement:
        if (props_ReadStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Konzolról olvasás");
          cpb.rawPresentation("BE");
          props_ReadStatement = cpb.create();
        }
        return props_ReadStatement;
      case LanguageConceptSwitch.ReturnStatement:
        if (props_ReturnStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("VISSZATÉRÉS");
          props_ReturnStatement = cpb.create();
        }
        return props_ReturnStatement;
      case LanguageConceptSwitch.RoutineCallExpression:
        if (props_RoutineCallExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Függvényhívás");
          cpb.presentationByReference(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x40e51422f4b5a0b2L, 0x40e51422f4b5a0b3L, "routine", "", "");
          props_RoutineCallExpression = cpb.create();
        }
        return props_RoutineCallExpression;
      case LanguageConceptSwitch.RoutineDefinition:
        if (props_RoutineDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Függvény definíció");
          cpb.presentationByName();
          props_RoutineDefinition = cpb.create();
        }
        return props_RoutineDefinition;
    }
    return null;
  }
}
