package mePLanG.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbsoluteValue = 0;
  public static final int BreakLineExpression = 1;
  public static final int EmptyLineStatement = 2;
  public static final int ExponentialExpression = 3;
  public static final int IPL_AllowedTypes = 4;
  public static final int IPL_ReturnTypes = 5;
  public static final int MathExpression = 6;
  public static final int PL_BooleanType = 7;
  public static final int PL_Boolean_Constant = 8;
  public static final int PL_Boolean_Constant_False = 9;
  public static final int PL_Boolean_Constant_True = 10;
  public static final int PL_CharacterType = 11;
  public static final int PL_DoWhileStatement = 12;
  public static final int PL_DoubleType = 13;
  public static final int PL_ElifClause = 14;
  public static final int PL_IfStatement = 15;
  public static final int PL_IntegerType = 16;
  public static final int PL_StatementList = 17;
  public static final int PL_StringType = 18;
  public static final int PL_VoidType = 19;
  public static final int PL_WhileStatement = 20;
  public static final int PrintStatement = 21;
  public static final int Program = 22;
  public static final int ReadStatement = 23;
  public static final int ReturnStatement = 24;
  public static final int RoutineCallExpression = 25;
  public static final int RoutineDefinition = 26;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L);
    builder.put(0x4eade13becd6eb22L, AbsoluteValue);
    builder.put(0x2562eb3549b4a1ceL, BreakLineExpression);
    builder.put(0x18b6f7391cb9f461L, EmptyLineStatement);
    builder.put(0x134d7de4e5ce2e1cL, ExponentialExpression);
    builder.put(0x31a7bceb8d57ae68L, IPL_AllowedTypes);
    builder.put(0x78692a4c9ebce2d0L, IPL_ReturnTypes);
    builder.put(0x4eade13becd6eb23L, MathExpression);
    builder.put(0x33d31477eed30866L, PL_BooleanType);
    builder.put(0x2562eb3549b926d1L, PL_Boolean_Constant);
    builder.put(0x4d491b819a5836b7L, PL_Boolean_Constant_False);
    builder.put(0x4d491b819a57e250L, PL_Boolean_Constant_True);
    builder.put(0x33d31477eed3b415L, PL_CharacterType);
    builder.put(0x573df0449373e839L, PL_DoWhileStatement);
    builder.put(0x33d31477eed3b417L, PL_DoubleType);
    builder.put(0x59b6d148fd49b313L, PL_ElifClause);
    builder.put(0x4d491b819a637a75L, PL_IfStatement);
    builder.put(0x33d31477eed3b414L, PL_IntegerType);
    builder.put(0x22328d3fafaf57a5L, PL_StatementList);
    builder.put(0x33d31477eed3b416L, PL_StringType);
    builder.put(0x78692a4c9ebce1c7L, PL_VoidType);
    builder.put(0x12aa75e12f7da127L, PL_WhileStatement);
    builder.put(0x533078fd992eeff7L, PrintStatement);
    builder.put(0x112caf8f13515c6bL, Program);
    builder.put(0x683c59fec17762dcL, ReadStatement);
    builder.put(0x63861855bcbf2787L, ReturnStatement);
    builder.put(0x40e51422f4b5a0b2L, RoutineCallExpression);
    builder.put(0x3d6d09297c1522fdL, RoutineDefinition);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
