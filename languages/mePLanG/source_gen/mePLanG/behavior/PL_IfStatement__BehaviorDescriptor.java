package mePLanG.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.baseLanguage.behavior.NextProgramPoint;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.behavior.IStatementListContainer__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class PL_IfStatement__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x4d491b819a637a75L, "mePLanG.structure.PL_IfStatement");

  public static final SMethod<NextProgramPoint> getNextProgramPoint_id3F8BxGibk8h = new SMethodBuilder<NextProgramPoint>(new SJavaCompoundTypeImpl(NextProgramPoint.class)).name("getNextProgramPoint").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3F8BxGibk8h").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(Boolean.TYPE, ""));
  public static final SMethod<SNode> getStatementList_id28aPEVv_31A = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getStatementList").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("28aPEVv_31A").build();
  public static final SMethod<SNode> getIfBranchStatementList_id4RCNb5xn$uK = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getIfBranchStatementList").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4RCNb5xn$uK").build();
  public static final SMethod<List<SNode>> getElifBranchesStatementLists_id4RCNb5xn_WU = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getElifBranchesStatementLists").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4RCNb5xn_WU").build();
  public static final SMethod<SNode> getElseBranchStatementList_id4RCNb5xnWpo = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getElseBranchStatementList").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4RCNb5xnWpo").build();
  public static final SMethod<Boolean> hasReturnValue_id3oaD0rhclhy = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasReturnValue").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3oaD0rhclhy").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getNextProgramPoint_id3F8BxGibk8h, getStatementList_id28aPEVv_31A, getIfBranchStatementList_id4RCNb5xn$uK, getElifBranchesStatementLists_id4RCNb5xn_WU, getElseBranchStatementList_id4RCNb5xnWpo, hasReturnValue_id3oaD0rhclhy);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static NextProgramPoint getNextProgramPoint_id3F8BxGibk8h(@NotNull SNode __thisNode__, @NotNull SNode child, boolean value) {
    if (child != SLinkOperations.getTarget(__thisNode__, LINKS.condition$IWRI)) {
      return null;
    }
    if (value) {
      if (SLinkOperations.getTarget(__thisNode__, LINKS.trueBranch$IX9a) != null) {
        return NextProgramPoint.continueAt(SLinkOperations.getTarget(__thisNode__, LINKS.trueBranch$IX9a), false);

      } else {
        return NextProgramPoint.continueAfter(__thisNode__);
      }
    } else {
      if (ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elifClauses$U_Hp)).isNotEmpty() && ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elifClauses$U_Hp)).first() != null) {
        return NextProgramPoint.continueAt(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elifClauses$U_Hp)).first(), true);
      } else if ((SLinkOperations.getTarget(__thisNode__, LINKS.falseBranch$IXaB) != null)) {
        return NextProgramPoint.continueAt(SLinkOperations.getTarget(__thisNode__, LINKS.falseBranch$IXaB), true);
      } else {
        return NextProgramPoint.continueAfter(__thisNode__);
      }
    }
  }
  /*package*/ static SNode getStatementList_id28aPEVv_31A(@NotNull SNode __thisNode__) {
    return null;
  }
  /*package*/ static SNode getIfBranchStatementList_id4RCNb5xn$uK(@NotNull SNode __thisNode__) {
    return SLinkOperations.getTarget(__thisNode__, LINKS.trueBranch$IX9a);
  }
  /*package*/ static List<SNode> getElifBranchesStatementLists_id4RCNb5xn_WU(@NotNull SNode __thisNode__) {
    List<SNode> list = new ArrayList<SNode>();
    for (SNode elif : SLinkOperations.getChildren(__thisNode__, LINKS.elifClauses$U_Hp)) {
      ListSequence.fromList(list).addElement(IStatementListContainer__BehaviorDescriptor.getStatementList_id28aPEVv_31A.invoke(elif));
    }
    return list;
  }
  /*package*/ static SNode getElseBranchStatementList_id4RCNb5xnWpo(@NotNull SNode __thisNode__) {
    return SLinkOperations.getTarget(__thisNode__, LINKS.falseBranch$IXaB);
  }
  /*package*/ static boolean hasReturnValue_id3oaD0rhclhy(@NotNull SNode __thisNode__) {
    return (boolean) PL_StatementList__BehaviorDescriptor.hasReturnValue_id3oaD0rhb2J6.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.trueBranch$IX9a)) && (ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elifClauses$U_Hp)).count() == 0 || ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elifClauses$U_Hp)).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) PL_StatementList__BehaviorDescriptor.hasReturnValue_id3oaD0rhb2J6.invoke(SLinkOperations.getTarget(it, LINKS.trueBranch$9AGY));
      }
    })) && (boolean) PL_StatementList__BehaviorDescriptor.hasReturnValue_id3oaD0rhb2J6.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.falseBranch$IXaB));
  }

  /*package*/ PL_IfStatement__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((NextProgramPoint) getNextProgramPoint_id3F8BxGibk8h(node, (SNode) parameters[0], ((boolean) (Boolean) parameters[1])));
      case 1:
        return (T) ((SNode) getStatementList_id28aPEVv_31A(node));
      case 2:
        return (T) ((SNode) getIfBranchStatementList_id4RCNb5xn$uK(node));
      case 3:
        return (T) ((List<SNode>) getElifBranchesStatementLists_id4RCNb5xn_WU(node));
      case 4:
        return (T) ((SNode) getElseBranchStatementList_id4RCNb5xnWpo(node));
      case 5:
        return (T) ((Boolean) hasReturnValue_id3oaD0rhclhy(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink condition$IWRI = MetaAdapterFactory.getContainmentLink(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x4d491b819a637a75L, 0x4d491b819a6dbaf0L, "condition");
    /*package*/ static final SContainmentLink trueBranch$IX9a = MetaAdapterFactory.getContainmentLink(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x4d491b819a637a75L, 0x4d491b819a6dbaffL, "trueBranch");
    /*package*/ static final SContainmentLink elifClauses$U_Hp = MetaAdapterFactory.getContainmentLink(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x4d491b819a637a75L, 0x59b6d148fd49b2f2L, "elifClauses");
    /*package*/ static final SContainmentLink falseBranch$IXaB = MetaAdapterFactory.getContainmentLink(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x4d491b819a637a75L, 0x4d491b819a6dbb02L, "falseBranch");
    /*package*/ static final SContainmentLink trueBranch$9AGY = MetaAdapterFactory.getContainmentLink(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x59b6d148fd49b313L, 0x59b6d148fd49b762L, "trueBranch");
  }
}
