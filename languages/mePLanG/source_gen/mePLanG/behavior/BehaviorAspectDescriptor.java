package mePLanG.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myProgram__BehaviorDescriptor = new Program__BehaviorDescriptor();
  private final BHDescriptor myPL_WhileStatement__BehaviorDescriptor = new PL_WhileStatement__BehaviorDescriptor();
  private final BHDescriptor myPL_StatementList__BehaviorDescriptor = new PL_StatementList__BehaviorDescriptor();
  private final BHDescriptor myPL_BooleanType__BehaviorDescriptor = new PL_BooleanType__BehaviorDescriptor();
  private final BHDescriptor myPL_IntegerType__BehaviorDescriptor = new PL_IntegerType__BehaviorDescriptor();
  private final BHDescriptor myPL_CharacterType__BehaviorDescriptor = new PL_CharacterType__BehaviorDescriptor();
  private final BHDescriptor myPL_StringType__BehaviorDescriptor = new PL_StringType__BehaviorDescriptor();
  private final BHDescriptor myPL_DoubleType__BehaviorDescriptor = new PL_DoubleType__BehaviorDescriptor();
  private final BHDescriptor myNthRoot__BehaviorDescriptor = new NthRoot__BehaviorDescriptor();
  private final BHDescriptor myRoutineDefinition__BehaviorDescriptor = new RoutineDefinition__BehaviorDescriptor();
  private final BHDescriptor myRoutineCallExpression__BehaviorDescriptor = new RoutineCallExpression__BehaviorDescriptor();
  private final BHDescriptor myPL_IfStatement__BehaviorDescriptor = new PL_IfStatement__BehaviorDescriptor();
  private final BHDescriptor myAbsoluteValue__BehaviorDescriptor = new AbsoluteValue__BehaviorDescriptor();
  private final BHDescriptor myPrintStatement__BehaviorDescriptor = new PrintStatement__BehaviorDescriptor();
  private final BHDescriptor myPL_DoWhileStatement__BehaviorDescriptor = new PL_DoWhileStatement__BehaviorDescriptor();
  private final BHDescriptor myPL_ElifClause__BehaviorDescriptor = new PL_ElifClause__BehaviorDescriptor();
  private final BHDescriptor myReturnStatement__BehaviorDescriptor = new ReturnStatement__BehaviorDescriptor();
  private final BHDescriptor myPL_VoidType__BehaviorDescriptor = new PL_VoidType__BehaviorDescriptor();
  private final BHDescriptor myIPL_ReturnTypes__BehaviorDescriptor = new IPL_ReturnTypes__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myAbsoluteValue__BehaviorDescriptor;
      case 1:
        return myIPL_ReturnTypes__BehaviorDescriptor;
      case 2:
        return myNthRoot__BehaviorDescriptor;
      case 3:
        return myPL_BooleanType__BehaviorDescriptor;
      case 4:
        return myPL_CharacterType__BehaviorDescriptor;
      case 5:
        return myPL_DoWhileStatement__BehaviorDescriptor;
      case 6:
        return myPL_DoubleType__BehaviorDescriptor;
      case 7:
        return myPL_ElifClause__BehaviorDescriptor;
      case 8:
        return myPL_IfStatement__BehaviorDescriptor;
      case 9:
        return myPL_IntegerType__BehaviorDescriptor;
      case 10:
        return myPL_StatementList__BehaviorDescriptor;
      case 11:
        return myPL_StringType__BehaviorDescriptor;
      case 12:
        return myPL_VoidType__BehaviorDescriptor;
      case 13:
        return myPL_WhileStatement__BehaviorDescriptor;
      case 14:
        return myPrintStatement__BehaviorDescriptor;
      case 15:
        return myProgram__BehaviorDescriptor;
      case 16:
        return myReturnStatement__BehaviorDescriptor;
      case 17:
        return myRoutineCallExpression__BehaviorDescriptor;
      case 18:
        return myRoutineDefinition__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x4eade13becd6eb22L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x78692a4c9ebce2d0L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x3bff452ada8b6393L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x33d31477eed30866L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x33d31477eed3b415L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x573df0449373e839L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x33d31477eed3b417L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x59b6d148fd49b313L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x4d491b819a637a75L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x33d31477eed3b414L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x22328d3fafaf57a5L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x33d31477eed3b416L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x78692a4c9ebce1c7L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x12aa75e12f7da127L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x533078fd992eeff7L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x112caf8f13515c6bL), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x63861855bcbf2787L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x40e51422f4b5a0b2L), MetaIdFactory.conceptId(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x3d6d09297c1522fdL)).seal();
}
