package mePLanG.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeAncestor;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class RoutineDefinition_Constraints extends BaseConstraintsDescriptor {
  public RoutineDefinition_Constraints() {
    super(CONCEPTS.RoutineDefinition$9p);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  @Override
  protected ConstraintFunction<ConstraintContext_CanBeAncestor, Boolean> calculateCanBeAncestorConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeAncestor, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeAncestor context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAnAncestor(context.getNode(), context.getChildNode(), context.getChildConcept(), context.getParentNode(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeRootBreakingPoint);
        }

        return result;
      }
    };
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    return SNodeOperations.isInstanceOf(parentNode, CONCEPTS.Program$im);
  }
  private static boolean staticCanBeAnAncestor(SNode node, SNode childNode, SAbstractConcept childConcept, SNode parentNode, SContainmentLink link) {
    if (Objects.equals(parentNode, node)) {
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(childConcept), CONCEPTS.IPL_ReturnTypes$81)) {
        return true;
      }
    }

    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(childConcept), CONCEPTS.IPL_AllowedTypes$_o)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.IntegerConstant$mo)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.CharConstant$xi)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.IntegerConstant$mo)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.IntegerLiteral$Eh)) {
      return true;
    }
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(childConcept), CONCEPTS.FloatingPointConstant$AA)) {
      return true;
    }
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(childConcept), CONCEPTS.FloatingPointFloatConstant$pv)) {
      return true;
    }
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(childConcept), CONCEPTS.PL_Boolean_Constant$x0)) {
      return true;
    }
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(childConcept), CONCEPTS.StringLiteral$4G)) {
      return true;
    }
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(childConcept), CONCEPTS.BreakLineExpression$Lu)) {
      return true;
    }

    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.Expression$TP)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.Statement$ok)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.PL_StatementList$Ev)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.ExpressionStatement$nm)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.LocalVariableDeclaration$Bf)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.LocalVariableDeclarationStatement$BI)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.VariableReference$sQ)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.ParameterDeclaration$qU)) {
      return true;
    }


    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(childConcept), CONCEPTS.AssignmentExpression$rS)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.EqualsExpression$lT)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.GreaterThanExpression$wR)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.GreaterThanOrEqualsExpression$n9)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.LessThanExpression$kw)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.LessThanOrEqualsExpression$Rc)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.ParenthesizedExpression$vE)) {
      return true;
    }

    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.PlusExpression$Re)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.MinusExpression$E9)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.DivExpression$d_)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.MulExpression$8_)) {
      return true;
    }


    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.PL_IfStatement$7f)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.PL_ElifClause$B)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.PL_WhileStatement$FE)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.PL_DoWhileStatement$jD)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.PrintStatement$BY)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.ReadStatement$FD)) {
      return true;
    }

    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.RoutineCallExpression$8D)) {
      return true;
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.ReturnStatement$Az)) {
      return true;
    }


    return false;
  }
  private static final SNodePointer canBeChildBreakingPoint = new SNodePointer("r:d9172f76-cfed-4928-acc3-d1b74f7e643a(mePLanG.constraints)", "6151411916034066571");
  private static final SNodePointer canBeRootBreakingPoint = new SNodePointer("r:d9172f76-cfed-4928-acc3-d1b74f7e643a(mePLanG.constraints)", "6151411916034330165");

  private static final class CONCEPTS {
    /*package*/ static final SConcept RoutineDefinition$9p = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x3d6d09297c1522fdL, "mePLanG.structure.RoutineDefinition");
    /*package*/ static final SConcept Program$im = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x112caf8f13515c6bL, "mePLanG.structure.Program");
    /*package*/ static final SInterfaceConcept IPL_ReturnTypes$81 = MetaAdapterFactory.getInterfaceConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x78692a4c9ebce2d0L, "mePLanG.structure.IPL_ReturnTypes");
    /*package*/ static final SInterfaceConcept IPL_AllowedTypes$_o = MetaAdapterFactory.getInterfaceConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x31a7bceb8d57ae68L, "mePLanG.structure.IPL_AllowedTypes");
    /*package*/ static final SConcept IntegerConstant$mo = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, "jetbrains.mps.baseLanguage.structure.IntegerConstant");
    /*package*/ static final SConcept CharConstant$xi = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1177d44b21bL, "jetbrains.mps.baseLanguage.structure.CharConstant");
    /*package*/ static final SConcept IntegerLiteral$Eh = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1129778b846L, "jetbrains.mps.baseLanguage.structure.IntegerLiteral");
    /*package*/ static final SConcept FloatingPointConstant$AA = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102cb19a434L, "jetbrains.mps.baseLanguage.structure.FloatingPointConstant");
    /*package*/ static final SConcept FloatingPointFloatConstant$pv = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x494547eeedc219b9L, "jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant");
    /*package*/ static final SConcept PL_Boolean_Constant$x0 = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x2562eb3549b926d1L, "mePLanG.structure.PL_Boolean_Constant");
    /*package*/ static final SConcept StringLiteral$4G = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, "jetbrains.mps.baseLanguage.structure.StringLiteral");
    /*package*/ static final SConcept BreakLineExpression$Lu = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x2562eb3549b4a1ceL, "mePLanG.structure.BreakLineExpression");
    /*package*/ static final SConcept Expression$TP = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL, "jetbrains.mps.baseLanguage.structure.Expression");
    /*package*/ static final SConcept Statement$ok = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L, "jetbrains.mps.baseLanguage.structure.Statement");
    /*package*/ static final SConcept PL_StatementList$Ev = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x22328d3fafaf57a5L, "mePLanG.structure.PL_StatementList");
    /*package*/ static final SConcept ExpressionStatement$nm = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, "jetbrains.mps.baseLanguage.structure.ExpressionStatement");
    /*package*/ static final SConcept LocalVariableDeclaration$Bf = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
    /*package*/ static final SConcept LocalVariableDeclarationStatement$BI = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement");
    /*package*/ static final SConcept VariableReference$sQ = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, "jetbrains.mps.baseLanguage.structure.VariableReference");
    /*package*/ static final SConcept ParameterDeclaration$qU = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration");
    /*package*/ static final SConcept AssignmentExpression$rS = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e96L, "jetbrains.mps.baseLanguage.structure.AssignmentExpression");
    /*package*/ static final SConcept EqualsExpression$lT = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b210L, "jetbrains.mps.baseLanguage.structure.EqualsExpression");
    /*package*/ static final SConcept GreaterThanExpression$wR = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbced38fcfL, "jetbrains.mps.baseLanguage.structure.GreaterThanExpression");
    /*package*/ static final SConcept GreaterThanOrEqualsExpression$n9 = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c8d0fac2cL, "jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression");
    /*package*/ static final SConcept LessThanExpression$kw = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbced3b82aL, "jetbrains.mps.baseLanguage.structure.LessThanExpression");
    /*package*/ static final SConcept LessThanOrEqualsExpression$Rc = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c8d53a915L, "jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression");
    /*package*/ static final SConcept ParenthesizedExpression$vE = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfb4ed32b7fL, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
    /*package*/ static final SConcept PlusExpression$Re = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7fbL, "jetbrains.mps.baseLanguage.structure.PlusExpression");
    /*package*/ static final SConcept MinusExpression$E9 = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f5L, "jetbrains.mps.baseLanguage.structure.MinusExpression");
    /*package*/ static final SConcept DivExpression$d_ = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xff2bbc13daL, "jetbrains.mps.baseLanguage.structure.DivExpression");
    /*package*/ static final SConcept MulExpression$8_ = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfe476b758fL, "jetbrains.mps.baseLanguage.structure.MulExpression");
    /*package*/ static final SConcept PL_IfStatement$7f = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x4d491b819a637a75L, "mePLanG.structure.PL_IfStatement");
    /*package*/ static final SConcept PL_ElifClause$B = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x59b6d148fd49b313L, "mePLanG.structure.PL_ElifClause");
    /*package*/ static final SConcept PL_WhileStatement$FE = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x12aa75e12f7da127L, "mePLanG.structure.PL_WhileStatement");
    /*package*/ static final SConcept PL_DoWhileStatement$jD = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x573df0449373e839L, "mePLanG.structure.PL_DoWhileStatement");
    /*package*/ static final SConcept PrintStatement$BY = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x533078fd992eeff7L, "mePLanG.structure.PrintStatement");
    /*package*/ static final SConcept ReadStatement$FD = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x683c59fec17762dcL, "mePLanG.structure.ReadStatement");
    /*package*/ static final SConcept RoutineCallExpression$8D = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x40e51422f4b5a0b2L, "mePLanG.structure.RoutineCallExpression");
    /*package*/ static final SConcept ReturnStatement$Az = MetaAdapterFactory.getConcept(0x4516c44b8ee54276L, 0xbb7f7414c1a20bd0L, 0x63861855bcbf2787L, "mePLanG.structure.ReturnStatement");
  }
}
